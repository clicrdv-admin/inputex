status
======
 - inputEx and inputEx.Field are implemented.
 - StringField and UrlField are implemented. All examples in StringField are fully working.



change logs
===========
log changes to annouce to users about the update

1. need to call .render() now

2. attributes may have changed. check docs for every field. :-)
    - some attributes require correct sequence:
        - put 'name' as the first attribute if you want to use it to as element id
        - if both parentEl and el are specified, parentEl shall go first in order to put the el under parentEl

    - support more options:
        instead providing a parentEl

3. fluent API
    - most methods are now return the field instance to support chaining
    - in general, except getter, the other method are likely to support chaining
    
4. Some public methods are made private as _xxx: function(){}

5. for YUI3, all HTMLElement are wrapped by a Y.Node, you don't directly use any HTMLElement

6. *** In inputEx-YUI2, there are 'el' and 'divEl',
    - el refer to the field element, such as <input ... >
    - divEl refer to the top level div wrapper

    in inputEx-YUI3, 'el' is mistakenly translated to the top level div element!!! instead of the field element
    TODO: review the naming

     - a getField() method is provided to get the Field node if available.

7. inputEx.cn and sn are removed for Y.Node.create()
    - sn is perhaps still needed

8. obsolete the updatedEvt, use the field:change custom event that is an improved version base on the JavaScript onchange,
    with improvement on:
    - it is fired not when the field has changed, but when the 'value' attribute is changed
    - TODO: In IE, enter key triggers an onchange to make the behavior cross browser compatible

9. all validation are changed to use 'validator'
    - 'regexp', 'required' are obsoleted; they are replaced by the validator:[{required:true},{regexp://}]
    - both 'regexp' and 'regex' are supported
    - validator supports using global message at {type:'meta', message:'this message is shown as the first message when
        there is validation error'}. User may choose to define a global message without message for individual rules.
    - validator supports per validation rule message, e.g. {required:true,'this field is required'}
    - validator supports using variable in invalid message, e.g. {minLength:6,maxLength:10,message:'length of password
      must be between {minLength} and {maxLength} characters}, only variable in the same rule is acceptable

    - the invalid concept is changed. there could be more than one violations at a time. The 'required' state is unused
      and the state and css may be removed soon. TODO remove 'required'


To developer
1. typeInvite
    - updateTypeInvite is now triggered by custom event. this changes reduces coupling
    - typeInvite doesn't update the value attribute, it just set the field
    - TODO onsubmit, it should set the field value to the valie attribute
    - TODO review this change. is it good to separate the visible field value and the value attribute?!
        rationale: the reason of change is to utilize the YUI3 attribute mechanism to set the default 'value', and it
            causes a side effect(benefit?) of separating the field value and attribute value.
        pro:
            - we can set a value before a field is rendered
            - we may display the value differently, e.g. a date is stored as 2008-11-30 but display as Nov 30, 2008
        con:
            - upon submit, it needs to update the field, otherwise, typeInvite value may be sent to the server (if there is no validation requirement)

2. getState()
    - it doesn't perform validation now, but return a state base on the last validation result

    